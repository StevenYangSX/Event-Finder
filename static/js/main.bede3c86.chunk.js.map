{"version":3,"sources":["components/event/Event.js","components/events/Events.js","components/search/Search.js","components/layout/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Event","className","src","this","props","image","alt","title","time","intro","href","Component","Events","Container","Row","events","map","event","console","log","Col","xs","name","images","url","promoter","dates","start","dateTime","key","id","Search","state","city","onChange","e","setState","target","value","onClick","preventDefault","Form","type","placeholder","Navbar","style","myStyle","backgroundColor","App","clickHandler","a","fetch","response","json","res","_embedded","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA2BeA,G,6LAtBP,OAOI,yBAAKC,UAAU,QACf,yBAAKA,UAAU,eAAeC,IAAKC,KAAKC,MAAMC,MAAOC,IAAI,KACzD,yBAAKL,UAAU,aACX,wBAAIA,UAAU,cAAcE,KAAKC,MAAMG,OACvC,uBAAGN,UAAU,aAAaE,KAAKC,MAAMI,MACrC,uBAAGP,UAAU,aAAaE,KAAKC,MAAMK,OACrC,uBAAGC,KAAK,KAAKT,UAAU,mBAAvB,sB,GAhBIU,c,wBC8BLC,E,iLAxBP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKb,UAAU,OACVE,KAAKC,MAAMW,OAAOC,KAAI,SAAAC,GAAK,OAIvBC,QAAQC,IAAI,iBAAkBF,GAC/B,kBAACG,EAAA,EAAD,CAAKC,GAAI,GACT,kBAAC,EAAD,CAAOpB,UAAU,MAAMM,MAAOU,EAAMK,KACpCjB,MAAOY,EAAMM,OAAO,GAAGC,IACvBf,MAAOQ,EAAMQ,SAASH,KACtBd,KAAMS,EAAMS,MAAMC,MAAMC,SACxBC,IAAKZ,EAAMS,MAAMI,e,GAfpBnB,a,QCwBNoB,E,2MA1BXC,MAAQ,CACJC,KAAO,I,EAGXC,SAAW,SAACC,GACR,EAAKC,SAAS,CAACH,KAAME,EAAEE,OAAOC,S,EAElCC,QAAU,SAAAJ,GACNA,EAAEK,iBACF,EAAKpC,MAAMmC,QAAQ,EAAKP,MAAMC,MAC9B,EAAKG,SAAS,CAACH,KAAM,M,wEAGrB,OACI,yBAAKhC,UAAU,aACX,kBAACwC,EAAA,EAAD,KACI,2BAAOC,KAAK,OAAOzC,UAAU,eACrB6B,GAAG,cAAca,YAAY,OAC7BT,SAAU/B,KAAK+B,WACvB,4BAAQQ,KAAK,SAASzC,UAAU,kBAAkBsC,QAASpC,KAAKoC,SAAhE,gB,GArBC5B,aCQNiC,EARA,WACX,OACI,yBAAK3C,UAAU,sBAAsB4C,MAAOC,GACxC,6CAONA,EAAU,CAACC,gBAAiB,WCuCnBC,E,2MArCbhB,MAAQ,CACNjB,OAAS,I,EAGXkC,a,uCAAe,WAAOhB,GAAP,iBAAAiB,EAAA,sEAGUC,MAAM,iEAAD,OAAkElB,EAAlE,oDAHf,cAGPmB,EAHO,gBAIKA,EAASC,OAJd,OAIPC,EAJO,OAMbpC,QAAQC,IAAImC,EAAIC,UAAUxC,QAE1BuC,EAAIC,UAAUxC,OAAOC,KAAK,SAACC,GAAD,OACxB,EAAKmB,SAAS,CAACrB,OAAO,GAAD,mBAAM,EAAKiB,MAAMjB,QAAjB,CAAyBE,SATnC,2C,8HAcb,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,yBAAKhB,UAAU,aACb,kDACA,6BACA,6BACA,8BAEF,kBAAC,EAAD,CAAQsC,QAASpC,KAAK8C,eACtB,yBAAKhD,UAAU,aACb,kBAAC,EAAD,CAAQc,OAAQZ,KAAK6B,MAAMjB,e,GA/BnBJ,aCAE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bede3c86.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nclass Event extends Component {\n    \n    render() {\n        return (\n            // <div>\n            //     <h4>{this.props.title}</h4>\n            //     <p>{this.props.intro}</p>\n            //     <p>{this.props.time}</p>\n            //     <img src={this.props.image} alt=\"\"/>\n            // </div>\n            <div className=\"card\">\n            <img className=\"card-img-top\" src={this.props.image} alt=\"\"/>\n            <div className=\"card-body\">\n                <h4 className=\"card-title\">{this.props.title}</h4>\n                <p className=\"card-text\">{this.props.time}</p>\n                <p className=\"card-text\">{this.props.intro}</p>\n                <a href=\"#!\" className=\"btn btn-primary\">Go somewhere</a>\n                \n            </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Event","import React, { Component } from 'react';\nimport Event from '../event/Event';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nclass Events extends Component {\n    render() {\n        return (\n            <Container >\n                <Row className=\"row\">\n                    {this.props.events.map(event => (\n                        // console.log(\"title is :\"+ event.name), \n                        // console.log(\"intro is :\"+ event.promoter.name), \n                        // console.log(\"time is :\"+ event.dates.start.dateTime), \n                         console.log(\"check key is :\"+ event),    \n                        <Col xs={6}>\n                        <Event className=\"col\" title={event.name} \n                        image={event.images[0].url} \n                        intro={event.promoter.name}\n                        time={event.dates.start.dateTime}\n                        key={event.dates.id}\n                        />\n                        </Col>\n                    ))}\n                    \n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default Events\n\n","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nclass Search extends Component {\n    \n    state = {\n        city : '',\n      }\n\n    onChange = (e) => {\n        this.setState({city: e.target.value}) \n    }\n    onClick = e => {\n        e.preventDefault();\n        this.props.onClick(this.state.city);\n        this.setState({city: ''});\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <Form>\n                    <input type=\"city\" className=\"form-control\" \n                            id=\"inputEmail3\" placeholder=\"City\" \n                            onChange={this.onChange}/>              \n                    <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onClick}>Search</button>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Search\n","import React from 'react'\n\nconst Navbar = () => {\n    return (\n        <div className=\"navbar navbar-light\" style={myStyle}>\n            <p>Event Finder</p>\n        </div>\n    )\n}\n\nexport default Navbar\n\nconst myStyle = {backgroundColor: '#e3f2fd'}","import React ,{Fragment, Component}from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Events from './components/events/Events';\nimport Event from './components/event/Event';\n//import axios from 'axios';\nimport Search from './components/search/Search';\nimport Navbar from './components/layout/Navbar';\n//RGAPI-15063e69-6a4d-49e8-b7d9-55529c07bd51\n//RGAPI-9192225c-5303-4cac-9bb2-5170fcf46f1f\n//RGAPI-6b74e87b-9912-47da-9147-3c1e17400b84\n//https://app.ticketmaster.com/discovery/v2/events.json?city=vancouver&size=1&apikey=d5jyQtKEHAXiqyDMCSVsdid5ooEqm5Pg\nclass App extends Component{\n\n  state = {\n    events : []\n  }\n\n  clickHandler = async (city) => {\n    //console.log(city)\n    //use fetch API to get data from Ticket Master API\n    const response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?keyword=${city}&size=5&apikey=d5jyQtKEHAXiqyDMCSVsdid5ooEqm5Pg`)\n    const res = await response.json();\n\n    console.log(res._embedded.events);\n    \n    res._embedded.events.map( (event) => (   \n      this.setState({events: [...this.state.events, event]})\n    ))\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Navbar/>\n        <div className=\"container\">\n          <h2>Showcase goes here</h2>\n          <br/>\n          <br/>\n          <br/>\n        </div>\n        <Search onClick={this.clickHandler}/>\n        <div className=\"container\">\n          <Events events={this.state.events}/>\n        </div>\n        \n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}