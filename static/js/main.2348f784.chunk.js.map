{"version":3,"sources":["assets/showcase.jpg","components/event/Event.js","context/events/eventsContext.js","components/events/Events.js","components/showCase/ShowCase.js","components/layout/NavBar.js","components/pages/About.js","components/eventDetails/EventDetails.js","App.js","serviceWorker.js","context/events/eventsReducer.js","context/types.js","context/events/EventsState.js","index.js"],"names":["module","exports","Event","image","title","time","eventId","className","src","alt","to","eventsContext","createContext","Events","useContext","EventsContext","events","length","Row","map","event","Col","key","id","large","md","sm","name","images","url","dates","start","dateTime","ShowCase","React","showCase","backgroundImg","NavBar","Navbar","bg","expand","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Form","inline","onSubmit","FormControl","type","placeholder","onChange","Button","About","EventDetails","props","useState","loading","setLoading","setEvent","eventDetails","a","axios","get","res","data","useEffect","match","params","style","width","localTime","localDate","_embedded","venues","address","line1","city","country","rel","target","console","log","App","exact","path","component","Boolean","window","location","hostname","state","action","payload","keyWord","EventsState","useReducer","EventsReducer","dispatch","e","preventDefault","classificationId","fetch","response","json","setShowCase","undefined","Provider","value","keyword","children","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2348f784.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/showcase.476b4013.jpg\";","import React from \"react\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { Link } from \"react-router-dom\"\n\nconst Event = ({ image, title, time, eventId }) => {\n  return (\n    // </div>\n    <div className=\"card flex-column\">\n      <img className=\"card-img-top\" src={image} alt=\"\" />\n      <div className=\"card card-body h-100 flex-column\">\n        <h4 className=\"card-title h-100\">{title}</h4>\n        <p className=\"card-text \">{time}</p>\n        <Link to={`/event/${eventId}`} className=\"btn btn-dark\">\n          Details\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Event\n","import { createContext } from \"react\"\n\nconst eventsContext = createContext()\n\nexport default eventsContext\n","import React, { useContext } from \"react\"\nimport Event from \"../event/Event\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport EventsContext from \"../../context/events/eventsContext\"\n\nconst Events = () => {\n  const eventsContext = useContext(EventsContext)\n  if (eventsContext.events.length > 0) {\n    return (\n      <Row className=\"row\">\n        {eventsContext.events.map(event => (\n          <Col key={event.id} large={8} md={4} sm={4}>\n            <Event\n              className=\"col\"\n              title={event.name}\n              image={event.images[0].url}\n              time={event.dates.start.dateTime}\n              eventId={event.id}\n            />\n          </Col>\n        ))}\n      </Row>\n    )\n  } else {\n    return <p></p>\n  }\n}\n\nexport default Events\n","import React from \"react\"\nimport backgroundImg from \"../../assets/showcase.jpg\"\nimport EventsContext from \"../../context/events/eventsContext\"\n\nconst ShowCase = () => {\n  const eventsContext = React.useContext(EventsContext)\n  if (eventsContext.showCase) {\n    return (\n      <div>\n        <img src={backgroundImg} alt=\"\" />\n      </div>\n    )\n  } else {\n    return <div></div>\n  }\n}\n\nexport default ShowCase\n","import React, { useContext } from \"react\"\nimport { Navbar, Nav, Form, FormControl, Button } from \"react-bootstrap\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport EventsContext from \"../../context/events/eventsContext\"\n\nconst NavBar = () => {\n  const eventsContext = useContext(EventsContext)\n  return (\n    <Navbar bg=\"dark\" expand=\"md\" variant=\"dark\">\n      <Navbar.Brand href=\"/\">\n        <i className=\"fas fa-icons\"></i> Event Finder\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Home</Nav.Link>\n          <Nav.Link href=\"/about\">About</Nav.Link>\n        </Nav>\n        <Form inline onSubmit={eventsContext.onSubmit}>\n          <FormControl\n            type=\"text\"\n            placeholder=\"artists\"\n            className=\"mr-sm-2\"\n            onChange={eventsContext.onChange}\n          />\n          <Button type=\"submit\" variant=\"secondary\">\n            Search\n          </Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default NavBar\n","import React ,{Fragment}from 'react'\n\nconst About = () => {\n    return (\n        <Fragment>\n            <div className=\"container\">\n                <p>Search events by Ticketmaster API. \n                    Just a practisce for React development.\n                </p>\n            </div>          \n        </Fragment>\n    )\n}\n\nexport default About\n","import React, { useEffect, Fragment, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport axios from \"axios\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n//import EventsContext from \"../../context/events/eventsContext\"\n\nconst EventDetails = props => {\n  // const eventsContext = React.useContext(EventsContext)\n  const [loading, setLoading] = useState(true)\n  const [event, setEvent] = useState({})\n\n  const eventDetails = async eventId => {\n    //console.log(\"check loading status:::\", loading)\n    const res = await axios.get(\n      `https://app.ticketmaster.com/discovery/v2/events/${eventId}.json?&apikey=d5jyQtKEHAXiqyDMCSVsdid5ooEqm5Pg`\n    )\n    setEvent(res.data)\n    // console.log(\"IN SET_EVENT, DATA IS:\", res.data)\n    // dispatch({ type: SET_EVENT, payload: res.data })\n    //console.log(\"check loading status(3):again expected true\", loading)\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    eventDetails(props.match.params.eventId)\n  }, [])\n\n  if (loading === false) {\n    return (\n      <Fragment>\n        <div className=\"container\">\n          <Link to=\"/\" className=\"btn btn-light\">\n            Back to Search\n          </Link>\n          <div className=\"card grid-2\">\n            <div className=\"all-center\">\n              <img\n                src={event.images[0].url}\n                className=\"round-img\"\n                style={{ width: \"150px\" }}\n                alt=\"\"\n              />\n              <h1>{event.name}</h1>\n              <p>\n                Time: {event.dates.start.localTime}{\" \"}\n                {event.dates.start.localDate}\n              </p>\n              <p>\n                Location: {event._embedded.venues[0].address.line1},{\" \"}\n                {event._embedded.venues[0].name},{\" \"}\n                {event._embedded.venues[0].city.name},{\" \"}\n                {event._embedded.venues[0].country.name}\n              </p>\n              <a href={event.url} rel=\"noopener noreferrer\" target=\"_blank\">\n                Go for Tickets\n              </a>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  } else {\n    return (\n      <div>\n        <p>{console.log(\"check loading\", loading)}</p>\n        <p>Loading...</p>\n      </div>\n    )\n  }\n}\n\nexport default EventDetails\n","import React, { Fragment } from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport \"./App.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Events from \"./components/events/Events\"\nimport ShowCase from \"./components/showCase/ShowCase\"\nimport Navbar from \"./components/layout/NavBar\"\nimport About from \"./components/pages/About\"\nimport EventDetails from \"./components/eventDetails/EventDetails\"\n\nconst App = () => {\n  return (\n    <Router>\n      <Fragment>\n        <Navbar />\n        <ShowCase />\n        <Switch>\n          <Route exact path=\"/\" component={Events} />\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/event/:eventId\" component={EventDetails}></Route>\n        </Switch>\n      </Fragment>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SET_EVENTS,\n  SET_LOADING,\n  SET_KEYWORD,\n  SET_SHOWCASE,\n  SET_EVENT,\n  RESET_LOADING\n} from \"../types\"\n\nexport default (state, action) => {\n  switch (action.type) {\n    case RESET_LOADING:\n      return {\n        ...state,\n        loading: true\n      }\n\n    case SET_EVENT:\n      return {\n        ...state,\n        event: action.payload,\n        loading: false\n      }\n    case SET_SHOWCASE:\n      return {\n        ...state,\n        showCase: false\n      }\n    case SET_KEYWORD:\n      return {\n        ...state,\n        keyWord: action.payload\n      }\n    case SET_EVENTS:\n      return {\n        ...state,\n        events: action.payload,\n        loading: false\n      }\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      }\n    default:\n      return state\n  }\n}\n","export const SET_EVENTS = \"SET_EVENTS\"\nexport const SET_LOADING = \"SET_LOADING\"\nexport const SET_SHOWCASE = \"SET_SHOWCASE\"\nexport const SET_KEYWORD = \"SET_KEYWORD\"\nexport const SET_EVENT = \"SET_EVENT\"\nexport const RESET_LOADING = \"RESET_LOADING\"\n","import React, { useReducer } from \"react\"\nimport EventsContext from \"./eventsContext\"\nimport EventsReducer from \"./eventsReducer\"\nimport { SET_EVENTS, SET_LOADING, SET_KEYWORD, SET_SHOWCASE } from \"../types\"\n\nconst EventsState = props => {\n  const initialState = {\n    events: [],\n    keyWord: \"\",\n    loading: false,\n    showCase: true,\n    event: {}\n  }\n\n  const [state, dispatch] = useReducer(EventsReducer, initialState)\n\n  //get events\n  //Function to search all envents from input\n  const onChange = e => {\n    //setKeyword(e.target.value)\n    dispatch({ type: SET_KEYWORD, payload: e.target.value })\n    console.log(\"check state: keyword:\", state.keyWord)\n  }\n\n  const onSubmit = async e => {\n    e.preventDefault()\n    setLoading()\n    const classificationId = [\"KZFzniwnSyZfZ7v7nJ\"]\n    const response = await fetch(\n      `https://app.ticketmaster.com/discovery/v2/events.json?keyword=${state.keyWord}&classificationId=${classificationId}&sort=date,asc&apikey=d5jyQtKEHAXiqyDMCSVsdid5ooEqm5Pg`\n    )\n    const res = await response.json()\n    setShowCase()\n    if (res._embedded !== undefined) {\n      dispatch({ type: SET_EVENTS, payload: res._embedded.events })\n    } else {\n      const emptydata = []\n      dispatch({ type: SET_EVENTS, payload: emptydata })\n    }\n  }\n\n  //set loading\n  const setLoading = () => dispatch({ type: SET_LOADING })\n\n  //set showcase\n  const setShowCase = () => dispatch({ type: SET_SHOWCASE })\n  return (\n    <EventsContext.Provider\n      value={{\n        events: state.events,\n        event: state.event,\n        loading: state.loading,\n        showCase: state.showCase,\n        keyword: state.keyWord,\n        onSubmit,\n        onChange\n      }}>\n      {props.children}\n    </EventsContext.Provider>\n  )\n}\n\nexport default EventsState\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport EventsState from \"./context/events/EventsState\"\n\nReactDOM.render(\n  <EventsState>\n    <App />\n  </EventsState>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}